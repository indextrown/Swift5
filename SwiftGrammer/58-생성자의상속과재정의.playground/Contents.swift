/*
 
 (110강)
 생성자의 상속/재정의
 메서드는 재정의 가능
 저장속성은 재정의 불가 이유: 데이터를 추가하는 작업이기 때문
 
 생성자
 - 메서드이긴 메서드이나 다른규칙존재
 - 상위클래스에서 만든 생성자는 하위 클래스에서 최적화 되어 있지 않음
 
 하위클래스는 기본적으로 상위클래스 생성자를 상속하지 않고 재정의 하는 것이 원칙
 -> 이유: 하위클래서에 최적화 안되어 있음
 -> 예외적으로 (안전한 경우)에만 상위클래스의 생성자가 자동 상속됨
 
 원칙: 1) 상위 지정생성자(이름/파라미터)오 2)현재단계의 저장속성을 고려해서 구현해야한다
 

 
 */


// 기본(Base)클래스
class Aclass {
    // x저장속성에 기본값 부여
    var x = 0
    
    // init() {} // 기본생성자는 컴파일러가 넣어줌
}

// 상위의 지정생성자 = init() = 기본생성자
// ctrl + command + space
class Bclass: Aclass {
    var y: Int
    
    // (선택1) 지정생성자로 재정의
//    override init() {
//        self.y = 0
//        // 하위 지정생성자는 반드시 상위 지정생성자 호출해야한다 = delegate up 해야한다
//        super.init()
//    }
    
    // (선택2) 편의생성자로 재정의. 편의생성자는 나의 단계에서 지정생성자를 호출해야함
    override convenience init() {
        self.init(y: 0)
    }
        
    // 지정 생성자
    // 매개변수 달라서 재정의(overriding) 필요 x
    init(y: Int) {
        self.y = y
        super.init()
    }
    
    // (선택3) 재정의 하지 않을 수도 있음(상속 안함)
    
    
}
