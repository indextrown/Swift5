/*
 
 (105강)
 
 재정의
 
 속성의 재정의
 - 타입/인스턴스 속성을 구분해서 생각해야 하지만, 실질적으로 타입 속성을 재정의를 하지는 않음.
 
 (1) 저장 속성의 재정의
 - 원칙적으로 불가능(고유한 메모리 공간은 유지 해야함)
 ==>저장속성은 고유의 메모리 공간이 있어서 하위클래스에서 고유의 공간을 바꾸는 방식으로 재정의 불가능
 ==>메모리 공간을 바꾸지 않는 방식으로는 재정의 가능
 
 (메서드 형태로 추가하는 방식의 재정의 가능)
 ==>메모리 구조를 건들지 않아서 가능
 ==>읽기/쓰기가능한 계산속성으로 재정의 가능(메서드), 기능 축소는 불가능x
 ==>속성 감시자를 추가는 가능(메서드) (실질적 단순 메서드를 추가해서 저장 속성이 변하는 시점을 관찰할뿐임)
 
 계산속성
 - 실질적인 메서드, 기능의 범위를 축소하는 형태로의 재정의는 불가능
 - 상위에서 읽기/쓰기가능하도록하면 하위에서도 읽기/쓰기가능하도록
 - 기능 확장은 가능하지만 기능 축소는 불가능
 
 
 
 */

// 재정의 기본 문법
class SomeSuperclass {
    // 저장속성
    var aValue = 0
    
    // 메서드
    func doSomething() {
        print("Do something")
    }
}


class SomeSubclass: SomeSuperclass {
    // 저장속성의 재정의는 원칙적 불가
    //override var aValue = 3
    
    // 그러나 메서드 형태로 부수적 추가는 가능
    // 메서드 형태로 새롭게 구현하는 것은 상위에 있는 메모리르 건들지 않는다
    override var aValue: Int {
        get {
            return 1
        }
        set {   // self로 쓰면 안됨
            super.aValue = newValue
        }
    }
    
    override func doSomething() {
        super.doSomething()
        print("Do something 2")
    }
}



// 속성의 재정의(엄격)

