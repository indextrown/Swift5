/*
 
 (43강) Optional
 
 옵서녈 타입의 기본 개념
 
 타입
 - 어떤 메모리 공간에 어떤 형태로 어떤 자료가 들어있다고 알려주는 개념
 - 어떤 메모리 공간에 어떤 정수형 타입이 들어있어
 - b라는 공간을 만들고 정수형이 들어있다고 선언했는 데 값이 없으면 cpu에서 코드를 읽다가 b라는 공건에 접근을 하면 에러 발생->무조간 앱이 꺼짐
 - 정리: 타입은 어떤 메모리 주소 공간에 반드시 이런 타입이 들어 있어 라는 의미
 
 옵셔널
 - ?
 - 값을 초기화 하지 않았을 때 접근해도 앱이 꺼지지 않기 위한 개념
 - nil 값 들어있음
 - nil은 실제 값이 없는 것이 아니라 "값이 없을 수 있음을 의미한다" 라고 한단계 쌓여있음
 - nil: 임시적인 값이 없을 수 있음을 "표현하는" 키워드-> 실제로 값이 없는 게 아님
 - 임시적인 타입이다
 - 다른언어 null: 실제 값이 없음을 나타냄
 - 단점: 실제로 값 사용할려면 포장지를(임시타입) 한번 벗겨내야 내부의 실제값 사용 가능
 - 변수에 어떤 옵셔널 타입을 넣었는지 추론 못함 -> 명시적 선언 필요
 - 값이 들어갈 수 있어야 함 즉 값이 변할 수 있어야해서 상수가 아닌 변수로 선언 해야함
 - 옵셔널 타입끼리 계산 불가능-> 임시적인 타입끼리는 연산 불가능
 
 
 Int
 메모리공간에 값 없으면 error발생
 
 Int?
 임시 타입을 넣는 개념
 cpu가 메모리 공간 접근 시 임시 타입이 뭔가가 무조건 들어 있어서 err나지 않음
 포장지로 둘러 쌓여 있다 실제로 값 사용할려면 포장지를 한번 벗겨야 한다
 임시값 형태: 포장지가 둘러쌓여 있음

 정식문법 표기
 let num: Optional<int> = 0 // 정식문법
 let num: Int? = 0          // 간편표기
 
 */

var yourName: String    // 선언
yourName = "홍길동"       // 초기화(값을 집어 넣는 행위)

// 값을 초기화 하지 않으면 에러발생 + App이 꺼짐
// print(yourName)

// 이런 상황이 와도 앱이 꺼지지 않기 위해 Optional 개념 만듬
var yourName2: String?
// print(yourName2)


// 타입
var name: String = "Index"

// 옵셔널 타입
var name2: String? = nil

// 변수에 어떤 옵셔널 타입을 넣었는지 추론 못함 -> 명시적 선언 필요
// var name3 = nil => error

var num: Int? = 3
//print(num)

var num2: Int? = nil
//print(num2)


var optionalNum: Int? = nil
optionalNum = 10
print(optionalNum!) // 값을 벗김


var a: Int? = 7
var b = a
print(b!)

var c: Int = 5
b = c
print(b) // 담을 수는 있는데 타입이 바뀜 이우: 옵셔널은 Int보다 범위가 큼

