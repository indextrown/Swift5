import UIKit

/*
 
 (153강)
 객체지향 프로그래밍
 -> 단점: 단방향의 상속이 발생하고, 상속시 메모리를 따라갈 수 밖에 없다
 -> 극복방식이 프로토콜 지향 프로그래밍
 
 프로토콜 지향 프로그래밍
 -> 다른언어와 다르게 프로토콜에서 여러기능이 존재(확장, 다형성)
 
 함수형 프로그래밍(=선언형 프로그래밍)
 -> 함수를 이용해서 사이드이펙트(=부작용)이 없도록 선언형으로 프로그래밍하는것
 -> 이미 주어진 함수를 조합해서 어떤 것을 가져다 붙이면 결과가 나올까
 
 명령형 프로그래밍
 -> 어떻게 구현해낼까
 -> 변수를 선언하고 변수의 값을 어떻게 바꿀지 등등
 -> 어떠한 객체의속성 "값을 바꾸는것" person.name = "홍길동"
 
 
 산에 올라가는 방법
 1) 산을 걸어서 올라가는 방법 (명령형)
 2) 헬리곱터에서 정상에서 내리는 방법(함수형)
 
 개발자 입장에서 2)번이 편하고 간단하다
 이유: 함수가 정의되어있고 개발자들 간에 약속이 되어 있어서
 우리는 함수를 가지고 "어떻게 조합해서 결과를 만들어 낼까"만 신경쓰면됨
 
 */


// 명령형 프로그래밍
let numbers = [1, 2, 3]
var sum = 0

for num in numbers {
    sum += num
}
print(sum)



// 함수형 프로그래밍
let newNumbers = [1, 2, 3]
var newSum = newNumbers.reduce(0, { $0 + $1 })
print(newSum)


// 위의 배열 중에, 홀수만 제곱해서, 그 숫자를 다 더한 값은?
var numberArray = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]
var numberResult = numberArray.filter { $0 % 2 == 0 }.map { $0 * $0 }.reduce(0) { $0 + $1 }
print(numberResult)


