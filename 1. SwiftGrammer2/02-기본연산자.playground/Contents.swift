/*
 
 (13강) 기본 연산자
 
 기본 연산자
 - 연산자(Operator)는 수학적인 기호다  +
 - 숫자나 변수를 피연산자(Operand) 라고 한다 b
 - 피연산자 개수에 따라 단한/이항/삼항 연산자로 구분할 수 있다
 
 단항 연산자
 - 공백 없이 반드시 붙여서 사용
 ex) +a, -a, !a, a
 
 이항 연산자
 - 양쪽에 공백 1칸씩 추가해서 사용
 - 양쪽을 붙여서 사용도 가능하지만 비대칭적 사용은 금지
 ex) a + b, a >= b
 
 삼항 연산자
 - 모든 사이에 공백을 한칸씩 추가해서 사용
 ex) a ? b : c
 
 기본 연산자 종류
 - 할당 연산자(=)(오른쪽 값을 왼쪽에 대입)
 ex) let num2 = 10
 
 - 산술 연산자+, -, *, /, %
 - 정수끼리 나눌 때 정수 타입으로 결과가 나옴
 - newResult = Double(a / b)  —> 0
 - newResult = Double(a) / Double(b) —> 0.8
 => 소수끼리 나눌때는 몫이 아니라 실제 소수 값이 나온다
 
 정리
 - 같은 타입의 데이터끼리만 연산 및 저장이 가능하다
 
 
 
 
 
 (14강) 복합 할당 연산자
 
 복합 할당 연산자
 += 더하고 다시 할당한다
 -=
 *=
 /=
 %=
 스위프트에서 ++는 사용 불가
 
 비교 연산자
 - 문장의 평가값을 참/거짓으로 도출한다
 - ==, !=, >, <, <=
 
 논리 연산자
 - !    (Logical Not Operator)
 - &&   (Logical And Operator)
 - ||   (Logical Or Operator)
 
 연산자 우선순위
 - 할당 연산자가 맨 마지막
 
 접근 연산자 .
 - .(점): 하위 개념으로 접근한다
 - name.count: 문자열 개수 세기
 - Int.random(in: 1...5): 1~5 사이 랜덤 숫자 뽑기
 - 명시적 멤버 표현식(점문법)

 */
