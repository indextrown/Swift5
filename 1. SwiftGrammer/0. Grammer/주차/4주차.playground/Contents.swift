print(123)

// 동적디스패치 / 다이렉트디스패치 를 찾아가서 실행


/*
 
 [클래스 / 구조체 차이]
 (6) 클래스 / 구조체 차이
   - 1. 값타입/참조타입 / 2. 상속
 (7) 클래스 구조체의 속도(Performance) 차이 정리 *참고: final 키워드
    - 1. 인스턴스 생성과정자체가 클래스가 느림
    - 2. 메서드의 실행과정 3.메모리 관리(ARC)
 
 (8) 값타입/참조타입의 차이
   - 1. 데이터 저장: 스택 (정확하게는 데이터, 힙, 스택에 모두 저장 됨) / 힙
   - 2. 복사시: 깊은복사(모든 값을 그대로 복사) / 얕은복사(메모리주소)
 
 
 
 www 2016년 성능정리
 클래스의 메서드 찍어내는 과정 자체가 구조체보다 느림
 힙의 빈공간 확인후 인스턴트 생성
 
 
 편의생성자는 지정생성자를 호출
 결국 지정생성자가 제일 무거움
 하지만 편의생성자를 통해 지정생성자를 호출해서 값을 지정해주는 것
 이런 호출을 편하게 하기 위한 생성자 = 편의생성자
 
 override: 재정의 = 상위에 똑같은이름이있어
 
 저장속성은 재정의가 되지않는다
 x와 y는 지정생성자에서 값을 설정해야함
 하위에서 값을 비틀어버리면 부모님꼐 책임져라는 기본적인 메커니즘을 벗어나게됨
 
 
 
 확정
 메서드를 추가해서 사용한다는의미
 저장속성은불가
 상속에서 재정의불가
 ->다이랙트 디스패치라서??
 
 
 (참고: 추가 생각해볼 문제)
 * 왜 인스턴스에서 메서드 테이블 주소를 갖지 않을까?
 * 객체지향 프로그래밍의 또다른 의미
 * 구조체 안에 클래스일때의 메모리 구조는?
 * 클래스 안에 구조체일때의 메모리 구조는?
 * 클래스 안에 클래스일때의 메모리 구조는?
 * 문자열 + (배열 / 딕셔너리/집합) --> 구조체 기본적으로 스택에 저장되지만 (힙에 저장되기도 함)
 
 대부분 언어들은 문자열 등등 클래스타입
 
 swift는 가벼운경우 가볍고빠르게 스택에 저장
 
 무거우면 heap에서 진행
 
 */
