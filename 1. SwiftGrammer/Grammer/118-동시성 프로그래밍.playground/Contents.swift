/*
 
 코어 / 스레드
 https://www.youtube.com/watch?v=_dhLLWJNhwY
      
 코어
 - cpu의 프로레서를 의미한다
 - 컴퓨터에서 일을 하는 (가장 빠른)부품
 
 코어 1개(싱글코어)
 - 한명이 컴퓨터 안에서 일을 한다
 - 동시에 두개의 일 못함
 - 하지만 그림판, 인터넷, 동시에 사용은 가능함(프로그램 전환이 빨라서 사람이 인지하기 힘듬)
 
 1980년도
 - 싱글코어 충분했음(당시 프로그램 기준)
 - 빌게이츠: 개인pc면 640kb의 메모리면 누구에게나 충분하다
 - 느리다 싶으면 cpu 클락을 올리면됨(cpu에게 채찍질해서 더 빠르게 계산하도록)
 - 1960년대 무어의 명언: 반도체 성능은 약 1.5년마다 2배로 상승할것이다(정확히 일치)
 
 2004년이후 무어의 법칙 깨짐
 - cpu 하나의 코어 성능만 올리다가 한계에 도달해서 반항을 하기 시작됨
 - 빨리 계산은 가능하나 발열을 잡지 못해서 cpu가 타버리기 시작함
 - 인텔이 2004년에 싱글 코어 손절 선언
 
 2005년
 - 멀티코어 cpu 등장
 - 코어개수 늘어나면서 싱글 스레드 퍼포먼스, 성능, 파워는 더이상 늘어나지 않음
 - 하나를 좋게 하는것보다는 두개 이상의 코어가 조화롭게 잘 동작하는것에 초점을 맞추게됨
 
 멀티코어 문제점
 - 비용대비 성능의 불만족
 - 서로의 값을 확인하는 소통행위 자체가 손해
 
 멀티코어 문제점 해결목표로 잡음
 - 싱글 코어보다 비용도 좋고 더 빠른 목표로 인텔이 2004년도에 손절하고
 - 2005년에 양산가능한 듀얼 cpu인 인텔 팬티엄 디프로데서의 스미스 필드 제품 나옴
 
 스레드
 - cpu가 말하는 스레드:   기술의 이름
 - 프로그래머가 아는 스레드: 소프트웨어의 스레드
 
 2002년 인텔에서 "하이퍼 스레드" 기술을 발표
 - 스레딩, smt기술 이용
 - 하나의 코어를 두개의 스레드라는 용도로 나누어서 마치 물리적인 두개의 코어가 있는 것 처럼 사용가능
 - cpu측에서는 극비사항이라서 외부에서는 진짜 2개의 코어가 일을 하고 있는것처럼 보여야함
 - 인텔이 마이크로소프트도 속인다
 - 코어가 1개있고 스레드 2개인 cpu를 구매하고 윈도우에서 작업관리자로 cpu 리소스 사용율보면
 2개의 cpu 리소스 사용률을 보여줌(속임당함)
 - 장점: 코어를 늘려서 즉 스레드를 만들어서 작업들을 병행처리 가능
 - 1코어 2스레드: 물리적인 코어는 1개, 밖으로 보이는 코어는 2개(스레드2개)
 - 4코어 8스레드: 코어 4개, 각각의 코어가 2개의 스레드보유 총 8스레드
 - 각 스레드가 메모장, 카톡, 크롬 등을 맡음
 - 프로그래머가 아는 스레드는 소프트웨어 스레드를 이용해서 시분할 다중화를 통해 다수의 스레드 인스턴스가 동시에 각자의 임무를
 하고 있는것으로 보인다
 - 코어가 많으면 무조건 빠르냐? ==> 그렇지는 않지만 가능성은 충분함
 
 
 4코어 8스래드
 - 4코어:   cpu안에 4개의 계산하는 독립적인 코어가 있다
 - 8스레드:
 
 
 정리:
 코어가 많다고 무조건 빠르게 아니라 프로그램 코딩이 멀티코어에 최적화 유무에 따라 4코어나 8코어나 비슷하게 동작할 여지가 있다
 
 코어
 - 물리적인 cpu의 프로세서

 스레드
 - 하이퍼 스레딩(smt) 기술을 이용해 실제로는 하나의 코어지만 2개의 코어처럼 보여지는 논리적인 cpu라고 생각하면됨
 
 
 나의 생삿
 스레드 2가지 종류
 - 코어를 2개로 속이는 스레드
 - 스레드가 일을 할때 시분할 처리를 하는 소프트웨어적인 스레드

 */



/*
 
 (워밍업)
 https://www.youtube.com/watch?v=zRJOte7TaPw&t=621s
 
 아이폰 11 프로
 - 6코어
 - 12개의 스레드 이상이 있다고 알려짐
 
 
 
 비동기(자세히)
 - 안기다린다
 - 작업을 1번쓰레드에서 다른 스레드에서 하도록 시킨 후
 그 작업이 끝나길 "안 기다리고" 다음 일을 진행한다(안 기다려도 다음 작업을 생성할 수 있다)
 
 동기
 - 기다린다
 - 작업을 다른 쓰레드에서 하도록 시킨 후
 그 작업이 끝나길 "기다렸다가" 다음일을 진행한다
  
 비동기가 일반적으로 필요한 이유
 - 대부분은 서버와의 통신(네트워크 작업) 때문
 
 직렬처리
 - 1번 스레드에서 하던 작업을 다른 스레드로 보내긴 하는데 다른 하나의 스레드로만 보내는 방식
 - (보통 메인에서) 분산처리 시킨 작업을 다른 한개의 스레드에서 처리
 
 동시처리
 - 분산처리에서 보낸 작업들이 한개의 스레드가 아닌 여러개의 스레드로 분산되어 처리된다
 - (보통 메인에서) 분산처리 시킨 작업을 다른 여러개의 스레드이서 처리
 
 
 
 분산처리 하려는 것이라면 무조건 동시(concurrent)처리가 무조건 좋아보이는데
 왜 직렬(Serial)처리가 필요한가?
 
 이유: 작업의 순서가 필요할 수도 있어서
 
 
 직렬처리
 - 순서가 중요한 작업을 처리할때 사용
 
 동시처리
 - 각자 독립적이지만 유사한 여러개의 작업을 처리할때 사용
 
 
 당근마켓 스크롤뷰
 - 이미지를 각자 다운로드 받는 셀
 - 이미지 각각이 서버와 연결되서 유사한 작업이다
 - 순서적으로 처리할 필요가 없지만 작업의 유사도가 있어서 동시적으로 처리를 위해 여러 스레드로 분산해서 처리하면 된다
 
 
 비동기(Async)랑 동시(Concurrent)는 같은 말인가?
 - NO
 
 비동기
 - 작업을 보내는 스레드에 관련된 개념
 - 1번 스레드에서 다른 스레드로 보낸 작업을 기다릴지 말지에 관련된 개념이 동기 / 비동기
 
 동시
 - 1번 스레드에서 다른 스레드로 작업을 보낼 때 한개냐 여러개냐 직렬 / 동시
 
 
 앱 스크롤 버벅거리는 이유
 - 표시하는 화면에 관련되서 1번 스레드에서만 일을 시키기 때문(이미지다운 작업, 셀에 표시하는작업 등)
 - 1번 스레드는 화면을 관리하는 스레드라서 1번 스레드에는 작업을 많이 시키면 안됨
 - 네트워크 관련 스레드는 1번 스레드에서 분리시켜서 일을 할 수 있도록 하는게 좋음
 */

