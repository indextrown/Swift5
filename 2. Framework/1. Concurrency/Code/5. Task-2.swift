//
//  5. Task-2.swift
//  Swift5
//
//  Created by 김동현 on 2/10/25.
//

/*
 Task 구조체
 - 비동기적인 일처리를 할 수 있는 하나의 일(work)의 단위
 - 우선순위를 지정해주는건 선택사항
 - 에러를 던지지 않는 함수 Task(priority: <#T##TaskPriority?#>, operation: <#T##() async -> Sendable#>)
 - 에러를 던질 수 있는 함수 Task(priority: <#T##TaskPriority?#>, operation: <#T##() async throws -> Sendable#>)
 - 클로저에 의해 작업을 생성한 다음 바로 비동기 일처리를 시작한다
 
 - 인스턴스를 생성하자마자 operation 파라미터에 해당하는 클로저를 전달하면서, 작업(Task)를 생성 및 클로저로 전달된 (비동기적인) 작업을 즉시 실행
 - 클로저 부분을 할당하여 작업을 만들 수 있고, 클로저를 바로 실행하면서 Task를 생성하는 것이다
 Task {
    // 비동기적인 일(비동기 함수 실행)
 }
 
 - 선택사항 우선순위 지정가능
 task = Task(priority: .우선순의) {
    // 비동기적인 일(비동기 함수 실행)
 }
 
 - 작업을 변수에 담아서 관리 가능
 - 작업의 취소 전파 가능
 - task.cancel()
 
 - 작업 자체는 Succes(성공값 리턴) 또는 Failure(실패)를 반환
 - await taask.value    // 작업 성공 결과값에 접근
 - await task.result    // 작업의 결과를 Result 타입으로 반환
 
 - 작업(Task)는 비동기적인 작업 처리를 진행, 즉 각 작업은 병렬적으로 일처리 진행한다
 - 작업(Task)는 현재 실행중인 컨텍스트의 메타데이터를 그대로 사용해서 상속한다
 
 [작업의 특징]
 - Swift COncurrency에서 작업(Task)은 비동기 일처리를 위한 기본 단위이다
 - 작업은 동시성 코드를 실행하고 그 상태와 관련 데이터를 관리한다 즉 작업은 자체적인 (Self-contained) 자원을 가진다
    -> 지역변수(Task Local), 취소처리, 비동기 코드의 실행/일시중지)
 - 작업의 내부는 (멈췄다가 실행될 수는 있다)순차적으로 동작한다(하나의 직렬 디스패치큐와 유사)
 - 비동기 함수를 Task 내부에서만 호출 가능하다. 비동기 실행 컨텍스트(비동기 실행될 수 있는 실행 환경)를 만드는 것
 - 컴파일 시점에 thread-safe하지 않은 코드 작성 불가능 하도록 한다
 - Task가 값을 리턴 가능(리턴값은 Sendable 프로토콜 준수)
 - 기존 GCD(대기열 방식)에서는 우선순위를 지정하더라도 그 우선순위에 따라 작동을 안할 수있다
 */
